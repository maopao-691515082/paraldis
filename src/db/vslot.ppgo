import (
    "thread";
    "encoding/var_int";
    "db/okv";
    "time";
    "../util";
)

final var kVSlotCount int = 0x10000;

class VSlotKeyStyle
{
    meta_prefix, data_seq_k, data_gc_tag_prefix, data_prefix string;

    func init(vsid int)
    {
        var vsid_prefix = var_int.encode(vsid);

        this.meta_prefix        = vsid_prefix + "M";
        this.data_seq_k         = vsid_prefix + "S";
        this.data_gc_tag_prefix = vsid_prefix + "G";
        this.data_prefix        = vsid_prefix + "D";
    }

    func meta_key(k string) string
    {
        return this.meta_prefix + k;
    }

    func data_gc_tag(data_seq int) string
    {
        return this.data_gc_tag_prefix + var_int.encode(data_seq);
    }

    func data_key_prefix(data_seq int) string
    {
        return this.data_prefix + var_int.encode(data_seq);
    }

    func zset_member_key(data_seq int, member string) string
    {
        return this.data_key_prefix(data_seq) + "M" + member;
    }
    func zset_rank_key_prefix(data_seq int) string
    {
        return this.data_key_prefix(data_seq) + "S";
    }
    func zset_rank_key(data_seq int, score f64, member string) string
    {
        return this.zset_rank_key_prefix(data_seq) + var_int.encode(this.f64_rank_num(score)) + member;
    }
    func f64_rank_num(score f64) int;
    func f64_from_rank_num(n int) f64;
}
var vslot_key_styles []VSlotKeyStyle;

var vslot_write_locks []thread.Mutex;

func init_vslot()
{
    vslot_key_styles.resize(kVSlotCount);
    vslot_write_locks.resize(kVSlotCount);
    for (var i : 0 .. kVSlotCount)
    {
        vslot_key_styles[i] = VSlotKeyStyle(i);
        vslot_write_locks[i] = thread.Mutex();
    }
}

func hash_tag_to_vslot_id(hash_tag string) int
{
    return util.str_hash(hash_tag) % kVSlotCount;
}

public class VSlot
{
    k_style VSlotKeyStyle;
    read_only bool;
    snapshot okv.Snapshot;

    func init(id int, /, read_only bool)
    {
        this.k_style = vslot_key_styles[id];
        this.read_only = read_only.get_or(false);
        this.snapshot = get_db(id).new_snapshot();
    }

    func decode_meta(m string) (tp int, expire_at_ms int, len int, data_seq int, payload_idx int)
    {
        var idx = 0;
        tp, idx = var_int.decode(m, idx);
        expire_at_ms, idx = var_int.decode(m, idx);
        len, idx = var_int.decode(m, idx);
        data_seq, idx = var_int.decode(m, idx);
        payload_idx = idx;
    }

    public func get_robj_meta(k string) (tp int, expire_at_ms int, len int, data_seq int, payload string)
    {
        var mk = this.k_style.meta_key(k);
        var m, ok = this.snapshot.get(mk);
        if (!ok)
        {
            tp = kRObjType_None;
            return;
        }

        var payload_idx int;
        tp, expire_at_ms, len, data_seq, payload_idx = this.decode_meta(m);
        if (expire_at_ms >= 0 && expire_at_ms < time.now_ms())
        {
            if (!this.read_only)
            {
                this.snapshot.del(mk);
            }
            tp = kRObjType_None;
            return;
        }
        payload = m[payload_idx :];
    }

    public func new_robj_meta(k string, tp int, len int, /, expire_at_ms int, payload string) (data_seq int)
    {
        if (payload.valid())
        {
            data_seq = -1;
        }
        else
        {
            var data_seq_k = this.k_style.data_seq_k;
            var data_seq_str, ok = this.snapshot.get(data_seq_k);
            if (ok)
            {
                var idx = 0;
                data_seq, idx = var_int.decode(data_seq_str, idx);
                assert(idx == data_seq_str.len());
            }
            ++ data_seq;
            this.snapshot.set(data_seq_k, var_int.encode(data_seq));
        }

        var mk = this.k_style.meta_key(k);
        var m_parts = []string{
            var_int.encode(tp),
            var_int.encode(expire_at_ms.get_or(-1)),
            var_int.encode(len),
            var_int.encode(data_seq),
            payload.get_or(""),
        };
        if (data_seq >= 0)
        {
            this.snapshot.set(this.k_style.data_gc_tag(data_seq), k);
        }
        this.snapshot.set(mk, "".join(m_parts));
    }

    public func update_robj_meta(k string, tp int, expire_at_ms int, len int, data_seq int, payload string)
    {
        var mk = this.k_style.meta_key(k);
        var m_parts = []string{
            var_int.encode(tp),
            var_int.encode(expire_at_ms),
            var_int.encode(len),
            var_int.encode(data_seq),
            payload,
        };
        this.snapshot.set(mk, "".join(m_parts));
    }

    public func del(k string)
    {
        this.snapshot.del(this.k_style.meta_key(k));
    }

    public func new_zset_member(data_seq int, score f64, member string)
    {
        this.snapshot.set(
            this.k_style.zset_member_key(data_seq, member),
            var_int.encode(this.k_style.f64_rank_num(score)));
        this.snapshot.set(
            this.k_style.zset_rank_key(data_seq, score, member), "");
    }

    public func get_zset_member_score(data_seq int, member string) (score f64, ok bool)
    {
        var v string;
        v, ok = this.snapshot.get(this.k_style.zset_member_key(data_seq, member));
        if (!ok)
        {
            return;
        }

        var n, idx = var_int.decode(v, 0);
        assert(idx == v.len());
        score = this.k_style.f64_from_rank_num(n);
        ok = true;
    }

    public func del_zset_member(data_seq int, score f64, member string)
    {
        this.snapshot.del(this.k_style.zset_member_key(data_seq, member));
        this.snapshot.del(this.k_style.zset_rank_key(data_seq, score, member));
    }

    public func iter_zset_member(data_seq int, start int, f func(f64, string) (/*stop*/ bool))
    {
        var kp = this.k_style.zset_rank_key_prefix(data_seq);
        var iter = this.snapshot.new_iter();
        iter.seek(kp);
        if (start > 0)
        {
            iter.move(start);
        }
        while (iter.valid())
        {
            var k = iter.key();
            if (!k.has_prefix(kp))
            {
                break;
            }
            var n, idx = var_int.decode(k, kp.len());
            if (f(this.k_style.f64_from_rank_num(n), k[idx :]))
            {
                break;
            }
            iter.next();
        }
    }
}
