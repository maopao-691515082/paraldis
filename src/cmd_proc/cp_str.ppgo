import (
    "../proto";
    "../db";
)

func read_on_str(client proto.Client, vs db.VSlot, k string, f func (string, bool))
{
    var tp, _, _, _, v = vs.get_robj_meta(k);
    if (tp == db.kRObjType_None || tp == db.kRObjType_Str)
    {
        f(v, tp == db.kRObjType_Str);
        return;
    }

    client.send_err(
        "Operation against a key holding the wrong kind of value",
        type = "WRONGTYPE");
}

class CP_GET
{
    k string;

    func parse(req [:]string) bool
    {
        if (req.len() == 1)
        {
            this.k = req[0];
            return true;
        }
        return false;
    }

    func key() string
    {
        return this.k;
    }

    public func do_read(client proto.Client, vs db.VSlot)
    {
        read_on_str(
            client, vs, this.k,
            func (v string, ok bool) {
                if (ok)
                {
                    client.send_str(v);
                }
                else
                {
                    client.send_nil();
                }
            },
        );
    }
}

class CP_SET
{
    k, v string;

    func parse(req [:]string) bool
    {
        if (req.len() == 2)
        {
            this.k = req[0];
            this.v = req[1];
            return true;
        }
        return false;
    }

    func key() string
    {
        return this.k;
    }

    public func do_write(client proto.Client, vs db.VSlot) (failed bool)
    {
        vs.new_robj_meta(this.k, db.kRObjType_Str, this.v.len(), payload = this.v);
        client.send_ok();
    }
}
